version: "3"

services:
  editor:
    container_name: asteroids_editor
    build:
      context: .
    user: developer
    privileged: true
    volumes:
      - developer_home:/home/developer
      - ../:/app/
      - $HOME/.ssh:/home/developer/.ssh
      - $HOME/.gnupg:/home/developer/.gnupg
      - ./.bashrc:/home/developer/.bashrc
      - ./.bash-git-prompt:/home/developer/.bash-git-prompt
    environment:
      TZ: "America/Denver"
    working_dir: /app
    command: tail -f /dev/null

  client:
    container_name: asteroids_client
    build:
      context: .
    user: developer
    volumes:
      - ../:/app/:z
    env_file:
      - .env
    command: >
      sh -c "
        cd client
        npm i
        npm run dev
      "
    ports:
      - "8080:8080"

  actor-system:
    image: nginx:latest
    container_name: asteroids_actor_system_reverse_proxy
    volumes:
      - ./default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - actor-system-1
      - actor-system-2

  actor-system-1:
    container_name: asteroids_actor_system_1
    build:
      context: .
    user: developer
    volumes:
      - ../:/app/:z
    command: >
      sh -c "
        cd actorSystem
        dotnet watch run
      "
    environment:
      DOTNET_WATCH_AUTO_RELOAD: "true"
      DOTNET_USE_POLLING_FILE_WATCHER: "true"
      DOTNET_WATCH_RESTART_ON_RUDE_EDIT: "true"
      ASPNETCORE_ENVIRONMENT: Development
      SIGNALR_URL: http://asteroids_signalr:8081/ws
      CLUSTER_CONFIG: |
        akka {
          actor {
            provider = cluster
          }
          remote {
            dot-netty.tcp {
              hostname = "actor-system-1"
              port = 2551
            }
          }
          cluster {
            seed-nodes = [
              "akka.tcp://asteroid-system@actor-system-1:2551"
              "akka.tcp://asteroid-system@actor-system-2:2551"
              "akka.tcp://asteroid-system@actor-system-3:2551"
            ]
            roles = ["lobby"]
          }
        }
      RAFT_GATEWAY_URL: http://raft-gateway:8080

  actor-system-2:
    container_name: asteroids_actor_system_2
    build:
      context: .
    user: developer
    volumes:
      - ../:/app/:z
    command: >
      sh -c "
        cd actorSystem
        dotnet watch run
      "
    environment:
      DOTNET_WATCH_AUTO_RELOAD: "true"
      DOTNET_USE_POLLING_FILE_WATCHER: "true"
      DOTNET_WATCH_RESTART_ON_RUDE_EDIT: "true"
      ASPNETCORE_ENVIRONMENT: Development
      SIGNALR_URL: http://asteroids_signalr:8081/ws
      CLUSTER_CONFIG: |
        akka {
          actor {
            provider = cluster
          }
          remote {
            dot-netty.tcp {
              hostname = "actor-system-2"
              port = 2551
            }
          }
          cluster {
            seed-nodes = [
              "akka.tcp://asteroid-system@actor-system-1:2551"
              "akka.tcp://asteroid-system@actor-system-2:2551"
              "akka.tcp://asteroid-system@actor-system-3:2551"
            ]
            roles = ["lobby"]
          }
        }
      RAFT_GATEWAY_URL: http://raft-gateway:8080

  actor-system-3:
    container_name: asteroids_actor_system_3
    build:
      context: .
    user: developer
    volumes:
      - ../:/app/:z
    command: >
      sh -c "
        cd actorSystem
        dotnet watch run
      "
    environment:
      DOTNET_WATCH_AUTO_RELOAD: "true"
      DOTNET_USE_POLLING_FILE_WATCHER: "true"
      DOTNET_WATCH_RESTART_ON_RUDE_EDIT: "true"
      ASPNETCORE_ENVIRONMENT: Development
      SIGNALR_URL: http://asteroids_signalr:8081/ws
      CLUSTER_CONFIG: |
        akka {
          actor {
            provider = cluster
          }
          remote {
            dot-netty.tcp {
              hostname = "actor-system-3"
              port = 2551
            }
          }
          cluster {
            seed-nodes = [
              "akka.tcp://asteroid-system@actor-system-1:2551"
              "akka.tcp://asteroid-system@actor-system-2:2551"
              "akka.tcp://asteroid-system@actor-system-3:2551"
            ]
            roles = ["lobby"]
          }
        }
      RAFT_GATEWAY_URL: http://raft-gateway:8080

  raft-gateway:
    container_name: asteroids_raft_gateway
    build:
      context: ../raft
      dockerfile: Raft.GateWay/Dockerfile
    ports:
      - "8082:8080"
    environment:
      - NODE_ADDRESSES=http://raft-node-1:8080,http://raft-node-2:8080,http://raft-node-3:8080
      - NODE_IDS=asteroids_node_1,asteroids_node_2,asteroids_node_3

  raft-node-1:
    container_name: asteroids_node_1
    image: raft-node:latest
    build:
      context: ../raft
      dockerfile: Raft.Node/Dockerfile
    environment:
      - NODE_ID=asteroids_node_1
      - PEER_ADDRESSES=http://raft-node-2:8080,http://raft-node-3:8080
      - PEER_IDS=asteroids_node_2,asteroids_node_3

  raft-node-2:
    container_name: asteroids_node_2
    image: raft-node:latest
    build:
      context: ../raft
      dockerfile: Raft.Node/Dockerfile
    environment:
      - NODE_ID=asteroids_node_2
      - PEER_ADDRESSES=http://raft-node-1:8080,http://raft-node-3:8080
      - PEER_IDS=asteroids_node_1,asteroids_node_3

  raft-node-3:
    container_name: asteroids_node_3
    image: raft-node:latest
    environment:
      - NODE_ID=asteroids_node_3
      - PEER_ADDRESSES=http://raft-node-1:8080,http://raft-node-2:8080
      - PEER_IDS=asteroids_node_1,asteroids_node_2

  asteroids_signalr:
    container_name: asteroids_signalr
    build:
      context: .
    user: developer
    volumes:
      - ../:/app/:z
    command: >
      sh -c "
        cd signalR
        dotnet watch run
      "
    environment:
      DOTNET_WATCH_AUTO_RELOAD: "true"
      DOTNET_USE_POLLING_FILE_WATCHER: "true"
      DOTNET_WATCH_RESTART_ON_RUDE_EDIT: "true"
      ASPNETCORE_URLS: http://+:8081
      ASPNETCORE_ENVIRONMENT: Development
    ports:
      - "8081:8081"

  asteroids_grafana:
    image: grafana/grafana:latest
    container_name: asteroids_grafana
    ports:
      - "3000:3000"
    environment:
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../dev-ops/grafana-datasource.yml:/etc/grafana/provisioning/datasources/grafana-datasource.yml
      - ../dev-ops/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/grafana-dashboards.yml
      - ../dashboards:/var/lib/grafana/dashboards

  asteroids_prometheus:
    image: prom/prometheus:latest
    container_name: asteroids_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../dev-ops/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

  asteroids_loki:
    image: grafana/loki:latest
    container_name: asteroids_loki
    ports:
      - "3100:3100"

  asteroids_zipkin:
    image: openzipkin/zipkin:latest
    container_name: asteroids_zipkin
    ports:
      - "9411:9411"

  asteroids_otel-collector:
    image: otel/opentelemetry-collector-contrib
    container_name: asteroids_otel-collector
    volumes:
      - ../dev-ops/otel-collector-config.yml:/etc/otelcol-contrib/config.yaml
    ports:
      - "1888:1888" # pprof extension
      - "8888:8888" # Prometheus metrics exposed by the Collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
      - "55679:55679" # zpages extension

volumes:
  grafana_data:
  developer_home:
  prometheus_data:
