syntax = "proto3";

option csharp_namespace = "Raft.Grpc";

package Raft.Grpc;

service RaftNode {
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
  rpc StrongGet(StrongGetRequest) returns (StrongGetResponse);
  rpc EventualGet(EventualGetRequest) returns (EventualGetResponse);
  rpc CompareAndSwap(CompareAndSwapRequest) returns (CompareAndSwapResponse);
  rpc MostRecentLeader(MostRecentLeaderRequest) returns (MostRecentLeaderResponse);
}

message LogEntry {
  int32 term = 1;
  string key = 2;
  string value = 3;
}

message AppendEntriesRequest {
  int32 term = 1;
  string leaderId = 2;
  int32 prevLogIndex = 3;
  int32 prevLogTerm = 4;
  repeated LogEntry entries = 5;
  int32 leaderCommit = 6;
}

message AppendEntriesResponse {
  int32 term = 1;
  bool success = 2;
}

message RequestVoteRequest {
  int32 term = 1;
  string candidateId = 2;
  int32 lastLogIndex = 3;
  int32 lastLogTerm = 4;
}

message RequestVoteResponse {
  int32 term = 1;
  bool voteGranted = 2;
}

message StrongGetRequest {
  string key = 1;
}

message StrongGetResponse {
  string value = 1;
  int32 version = 2;
}

message EventualGetRequest {
  string key = 1;
}

message EventualGetResponse {
  string value = 1;
}

message CompareAndSwapRequest {
  string key = 1;
  string expectedValue = 2;
  string newValue = 3;
  int32 version = 4;
}

message CompareAndSwapResponse {
  bool success = 1;
  int32 version = 2;
  string value = 3;
}

message MostRecentLeaderRequest {

}

message MostRecentLeaderResponse {
  string leaderId = 1;
}